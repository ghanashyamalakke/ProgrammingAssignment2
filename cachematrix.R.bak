## Professor Peng has given the templates for the 2 methods for the assignment 
## makeCacheMatrix -> function creates a matrix object that is able to cache its inverse
## cacheSolve -> function computes the inverse of the matrix returned by makeCacheMatrix function. If the inverse has already been calculated (and the matrix has not changed), 
##               then the cacheSolve retrieves the inverse from the cache.The inverse of a square matrix is obtained with the solve function in R.

## References : Notes section of https://github.com/rdpeng/ProgrammingAssignment2

makeCacheMatrix <- function(x = matrix()) {

	## Initialize the inverse
	inv <- NULL

	## Method to set the matrix
	set <- function( matrix ) {
		x <<- matrix
		inv <<- NULL
	}

	## Method the get the matrix
	get <- function() {
    		## Return the matrix
    		x
	}

	## Method to set the inverse of the matrix
	setInverse <- function(inverse) {
		inv <<- inverse
	}

	## Method to get the inverse of the matrix
	getInverse <- function() {
		## Return the inverse
		inv
	}

	## Return a list of the methods
	list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)

}

cacheSolve <- function(x, ...) {
        
	## Return a matrix that is the inverse of 'x'
	mat <- x$getInverse()

	## Just return the inverse if its already set
	if( !is.null(mat) ) {
            message("getting cached data")
            return(mat)
	}

	## Get the matrix from our object
	data <- x$get()

	## Calculate the inverse using matrix multiplication
	mat <- solve(data) %*% data

	## Set the inverse to the object
	x$setInverse(mat)

	## Return the matrix
	mat
}
